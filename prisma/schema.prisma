// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations for monitoring data
  pasien    Pasien[]
  verifikasi Verifikasi[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Monitoring models for hospital cost system
model Pasien {
  id          String   @id @default(cuid())
  nama        String
  rm          String   @unique
  kelas       String
  biaya       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  obat        Obat[]
  tindakan    Tindakan[]
  verifikasi  Verifikasi[]
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}

model Obat {
  id         String  @id @default(cuid())
  pasienId   String
  nama       String
  jumlah     Int
  harga      Float
  total      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  pasien     Pasien  @relation(fields: [pasienId], references: [id], onDelete: Cascade)
}

model Tindakan {
  id         String  @id @default(cuid())
  pasienId   String
  nama       String
  biaya      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  pasien     Pasien  @relation(fields: [pasienId], references: [id], onDelete: Cascade)
}

model Verifikasi {
  id         String   @id @default(cuid())
  pasienId   String
  status     String
  catatan    String?
  verifiedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  pasien     Pasien   @relation(fields: [pasienId], references: [id], onDelete: Cascade)
  verifier   User     @relation(fields: [verifiedById], references: [id])
  verifiedById String
}